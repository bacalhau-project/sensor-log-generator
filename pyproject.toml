[project]
name = "sensor-log-generator"
version = "0.0.0"  # Version managed by git tags
description = "A robust sensor data simulation system for testing and development"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "numpy>=2.2.5",
    "psutil>=7.0.0",
    "pytest>=8.3.5",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "tenacity>=9.1.2",
    "pydantic>=2.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "pre-commit>=3.5.0",
    "bandit[toml]>=1.7.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "PTH",   # flake8-use-pathlib
    "ERA",   # flake8-eradicate
    "TRY",   # tryceratops
    "RUF",   # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "TRY003", # long exception messages
    "SIM108", # use ternary operator
    "ARG002", # unused method argument
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "PTH"]
"main.py" = ["TRY"]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
check_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
follow_imports = "skip"
ignore_missing_imports = true
allow_untyped_globals = true
allow_redefinition = true
implicit_reexport = true
strict = false

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "timeout: marks tests with a timeout limit",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests", "test_*.py", ".venv", "venv"]
severity = "medium"
confidence = "medium"
skips = ["B101", "B601"]  # Skip assert_used and shell_with_params tests
